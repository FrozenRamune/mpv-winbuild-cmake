diff --git a/libavcodec/decode.c b/libavcodec/decode.c
index 148af71ac4..f4e818e9a3 100644
--- a/libavcodec/decode.c
+++ b/libavcodec/decode.c
@@ -351,6 +351,13 @@ static int discard_samples(AVCodecContext *avctx, AVFrame *frame, int64_t *disca
         return AVERROR(EAGAIN);
     }
 
+    if(frame->opaque) {
+        av_log(avctx, AV_LOG_DEBUG, "frame->opaque is found, skip_samples is %d\n", *((int*)frame->opaque));
+        avci->skip_samples = *((int*)frame->opaque);
+    } else {
+        av_log(avctx, AV_LOG_DEBUG, "frame->opaque is not found, skip_samples is %d\n", avci->skip_samples);
+    }
+
     if (avci->skip_samples > 0) {
         if (frame->nb_samples <= avci->skip_samples){
             *discarded_samples += frame->nb_samples;
@@ -453,6 +460,13 @@ FF_ENABLE_DEPRECATION_WARNINGS
     }
     emms_c();
 
+    if(pkt->opaque) {
+        av_log(avctx, AV_LOG_DEBUG, "pkt->opaque is found, skip_samples is %d\n", *((int*)pkt->opaque));
+        frame->opaque = pkt->opaque;
+    } else {
+        av_log(avctx, AV_LOG_DEBUG, "pkt->opaque is not found\n");
+    }
+
     if (avctx->codec->type == AVMEDIA_TYPE_VIDEO) {
         ret = (!got_frame || frame->flags & AV_FRAME_FLAG_DISCARD)
                           ? AVERROR(EAGAIN)
diff --git a/libavformat/dashdec.c b/libavformat/dashdec.c
index 71d79067a9..f2cefd9bd3 100644
--- a/libavformat/dashdec.c
+++ b/libavformat/dashdec.c
@@ -160,6 +160,8 @@ typedef struct DASHContext {
     int is_init_section_common_audio;
     int is_init_section_common_subtitle;
 
+    int encoder_delay_samples;
+    int padding_samples;
 } DASHContext;
 
 static int ishttp(char *url)
@@ -2197,12 +2199,40 @@ static int dash_read_packet(AVFormatContext *s, AVPacket *pkt)
     if (!cur) {
         return AVERROR_INVALIDDATA;
     }
+
     while (!ff_check_interrupt(c->interrupt_callback) && !ret) {
         ret = av_read_frame(cur->ctx, pkt);
         if (ret >= 0) {
             /* If we got a packet, return it */
             cur->cur_timestamp = av_rescale(pkt->pts, (int64_t)cur->ctx->streams[0]->time_base.num * 90000, cur->ctx->streams[0]->time_base.den);
             pkt->stream_index = cur->stream_index;
+
+            int skip_samples = -1;
+
+            if(cur->cur_seq_no == 0) {
+                if(c->encoder_delay_samples != -1) {
+                    av_log(s, AV_LOG_DEBUG, "proccessing first segment, encoder_delay_samples is %d\n", c->encoder_delay_samples);
+                    skip_samples = c->encoder_delay_samples;
+                } else {
+                    av_log(s, AV_LOG_DEBUG, "proccessing first segment, use deafult skip_samples\n");
+                }
+            } else {
+                if(c->padding_samples != -1) {
+                    av_log(s, AV_LOG_DEBUG, "proccessing segment, padding_samples is %d\n", c->padding_samples);
+                    skip_samples = c->padding_samples;
+                } else if(c->encoder_delay_samples != -1) {
+                    av_log(s, AV_LOG_DEBUG, "proccessing segment, encoder_delay_samples is %d\n", c->encoder_delay_samples);
+                    skip_samples = c->encoder_delay_samples;
+                } else {
+                    av_log(s, AV_LOG_DEBUG, "proccessing segment, it skips no frame.\n");
+                    skip_samples = 0;
+                }
+            }
+        
+            if(skip_samples >= 0) {
+                pkt->opaque = &skip_samples;
+            }
+
             return 0;
         }
         if (cur->is_restart_needed) {
@@ -2346,6 +2376,8 @@ static const AVOption dash_options[] = {
         {.str = "aac,m4a,m4s,m4v,mov,mp4,webm,ts"},
         INT_MIN, INT_MAX, FLAGS},
     { "cenc_decryption_key", "Media decryption key (hex)", OFFSET(cenc_decryption_key), AV_OPT_TYPE_STRING, {.str = NULL}, INT_MIN, INT_MAX, .flags = FLAGS },
+    { "encoder_delay_samples", "encoder delay", OFFSET(encoder_delay_samples), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, .flags = FLAGS },
+    { "padding_samples", "padding", OFFSET(padding_samples), AV_OPT_TYPE_INT, {.i64 = -1}, -1, INT_MAX, .flags = FLAGS },
     {NULL}
 };
 
